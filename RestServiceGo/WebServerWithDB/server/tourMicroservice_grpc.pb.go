// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: tourMicroservice.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TourMicroserviceClient is the client API for TourMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourMicroserviceClient interface {
	CreatePreference(ctx context.Context, in *TourPreferenceCreationRequest, opts ...grpc.CallOption) (*TourPreferenceResponse, error)
	GetPreference(ctx context.Context, in *TourPreferenceIdRequest, opts ...grpc.CallOption) (*TourPreferenceResponse, error)
	CreateFacility(ctx context.Context, in *FacilityCreationRequest, opts ...grpc.CallOption) (*FacilityResponse, error)
	GetAllFacilities(ctx context.Context, in *FacilitiesIdRequest, opts ...grpc.CallOption) (*FacilityListResponse, error)
	CreateKeyPoint(ctx context.Context, in *KeyPointCreationRequest, opts ...grpc.CallOption) (*KeyPointResponse, error)
	GetAllKeyPoints(ctx context.Context, in *KeyPointsIdRequest, opts ...grpc.CallOption) (*KeyPointListResponse, error)
	GetKeyPoint(ctx context.Context, in *KeyPointIdRequest, opts ...grpc.CallOption) (*KeyPointResponse, error)
	CreateTour(ctx context.Context, in *TourCreationRequest, opts ...grpc.CallOption) (*TourResponse, error)
	GetAllTours(ctx context.Context, in *ToursIdRequest, opts ...grpc.CallOption) (*TourListResponse, error)
	GetTour(ctx context.Context, in *TourIdRequest, opts ...grpc.CallOption) (*TourResponse, error)
	AddTourEquipment(ctx context.Context, in *TourEquipmentCreationRequest, opts ...grpc.CallOption) (*Empty, error)
	GetTourEquipment(ctx context.Context, in *TourEquipmentListIdRequest, opts ...grpc.CallOption) (*EquipmentListResponse, error)
	DeleteTourEquipment(ctx context.Context, in *TourEquipmentDeletionRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateEquipment(ctx context.Context, in *EquipmentCreationRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	GetAllEquipment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EquipmentListResponse, error)
	GetEquipment(ctx context.Context, in *EquipmentIdRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
}

type tourMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourMicroserviceClient(cc grpc.ClientConnInterface) TourMicroserviceClient {
	return &tourMicroserviceClient{cc}
}

func (c *tourMicroserviceClient) CreatePreference(ctx context.Context, in *TourPreferenceCreationRequest, opts ...grpc.CallOption) (*TourPreferenceResponse, error) {
	out := new(TourPreferenceResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/CreatePreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetPreference(ctx context.Context, in *TourPreferenceIdRequest, opts ...grpc.CallOption) (*TourPreferenceResponse, error) {
	out := new(TourPreferenceResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) CreateFacility(ctx context.Context, in *FacilityCreationRequest, opts ...grpc.CallOption) (*FacilityResponse, error) {
	out := new(FacilityResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/CreateFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetAllFacilities(ctx context.Context, in *FacilitiesIdRequest, opts ...grpc.CallOption) (*FacilityListResponse, error) {
	out := new(FacilityListResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetAllFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) CreateKeyPoint(ctx context.Context, in *KeyPointCreationRequest, opts ...grpc.CallOption) (*KeyPointResponse, error) {
	out := new(KeyPointResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/CreateKeyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetAllKeyPoints(ctx context.Context, in *KeyPointsIdRequest, opts ...grpc.CallOption) (*KeyPointListResponse, error) {
	out := new(KeyPointListResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetAllKeyPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetKeyPoint(ctx context.Context, in *KeyPointIdRequest, opts ...grpc.CallOption) (*KeyPointResponse, error) {
	out := new(KeyPointResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetKeyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) CreateTour(ctx context.Context, in *TourCreationRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/CreateTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetAllTours(ctx context.Context, in *ToursIdRequest, opts ...grpc.CallOption) (*TourListResponse, error) {
	out := new(TourListResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetAllTours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetTour(ctx context.Context, in *TourIdRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) AddTourEquipment(ctx context.Context, in *TourEquipmentCreationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/AddTourEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetTourEquipment(ctx context.Context, in *TourEquipmentListIdRequest, opts ...grpc.CallOption) (*EquipmentListResponse, error) {
	out := new(EquipmentListResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetTourEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) DeleteTourEquipment(ctx context.Context, in *TourEquipmentDeletionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/DeleteTourEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) CreateEquipment(ctx context.Context, in *EquipmentCreationRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/CreateEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetAllEquipment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EquipmentListResponse, error) {
	out := new(EquipmentListResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetAllEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourMicroserviceClient) GetEquipment(ctx context.Context, in *EquipmentIdRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, "/server.TourMicroservice/GetEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourMicroserviceServer is the server API for TourMicroservice service.
// All implementations must embed UnimplementedTourMicroserviceServer
// for forward compatibility
type TourMicroserviceServer interface {
	CreatePreference(context.Context, *TourPreferenceCreationRequest) (*TourPreferenceResponse, error)
	GetPreference(context.Context, *TourPreferenceIdRequest) (*TourPreferenceResponse, error)
	CreateFacility(context.Context, *FacilityCreationRequest) (*FacilityResponse, error)
	GetAllFacilities(context.Context, *FacilitiesIdRequest) (*FacilityListResponse, error)
	CreateKeyPoint(context.Context, *KeyPointCreationRequest) (*KeyPointResponse, error)
	GetAllKeyPoints(context.Context, *KeyPointsIdRequest) (*KeyPointListResponse, error)
	GetKeyPoint(context.Context, *KeyPointIdRequest) (*KeyPointResponse, error)
	CreateTour(context.Context, *TourCreationRequest) (*TourResponse, error)
	GetAllTours(context.Context, *ToursIdRequest) (*TourListResponse, error)
	GetTour(context.Context, *TourIdRequest) (*TourResponse, error)
	AddTourEquipment(context.Context, *TourEquipmentCreationRequest) (*Empty, error)
	GetTourEquipment(context.Context, *TourEquipmentListIdRequest) (*EquipmentListResponse, error)
	DeleteTourEquipment(context.Context, *TourEquipmentDeletionRequest) (*Empty, error)
	CreateEquipment(context.Context, *EquipmentCreationRequest) (*EquipmentResponse, error)
	GetAllEquipment(context.Context, *Empty) (*EquipmentListResponse, error)
	GetEquipment(context.Context, *EquipmentIdRequest) (*EquipmentResponse, error)
	mustEmbedUnimplementedTourMicroserviceServer()
}

// UnimplementedTourMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedTourMicroserviceServer struct {
}

func (UnimplementedTourMicroserviceServer) CreatePreference(context.Context, *TourPreferenceCreationRequest) (*TourPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreference not implemented")
}
func (UnimplementedTourMicroserviceServer) GetPreference(context.Context, *TourPreferenceIdRequest) (*TourPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreference not implemented")
}
func (UnimplementedTourMicroserviceServer) CreateFacility(context.Context, *FacilityCreationRequest) (*FacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacility not implemented")
}
func (UnimplementedTourMicroserviceServer) GetAllFacilities(context.Context, *FacilitiesIdRequest) (*FacilityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFacilities not implemented")
}
func (UnimplementedTourMicroserviceServer) CreateKeyPoint(context.Context, *KeyPointCreationRequest) (*KeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPoint not implemented")
}
func (UnimplementedTourMicroserviceServer) GetAllKeyPoints(context.Context, *KeyPointsIdRequest) (*KeyPointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKeyPoints not implemented")
}
func (UnimplementedTourMicroserviceServer) GetKeyPoint(context.Context, *KeyPointIdRequest) (*KeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPoint not implemented")
}
func (UnimplementedTourMicroserviceServer) CreateTour(context.Context, *TourCreationRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourMicroserviceServer) GetAllTours(context.Context, *ToursIdRequest) (*TourListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedTourMicroserviceServer) GetTour(context.Context, *TourIdRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTour not implemented")
}
func (UnimplementedTourMicroserviceServer) AddTourEquipment(context.Context, *TourEquipmentCreationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTourEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) GetTourEquipment(context.Context, *TourEquipmentListIdRequest) (*EquipmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) DeleteTourEquipment(context.Context, *TourEquipmentDeletionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) CreateEquipment(context.Context, *EquipmentCreationRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) GetAllEquipment(context.Context, *Empty) (*EquipmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) GetEquipment(context.Context, *EquipmentIdRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedTourMicroserviceServer) mustEmbedUnimplementedTourMicroserviceServer() {}

// UnsafeTourMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourMicroserviceServer will
// result in compilation errors.
type UnsafeTourMicroserviceServer interface {
	mustEmbedUnimplementedTourMicroserviceServer()
}

func RegisterTourMicroserviceServer(s grpc.ServiceRegistrar, srv TourMicroserviceServer) {
	s.RegisterService(&TourMicroservice_ServiceDesc, srv)
}

func _TourMicroservice_CreatePreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPreferenceCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).CreatePreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/CreatePreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).CreatePreference(ctx, req.(*TourPreferenceCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourPreferenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetPreference(ctx, req.(*TourPreferenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_CreateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacilityCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).CreateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/CreateFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).CreateFacility(ctx, req.(*FacilityCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetAllFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacilitiesIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetAllFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetAllFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetAllFacilities(ctx, req.(*FacilitiesIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_CreateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).CreateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/CreateKeyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).CreateKeyPoint(ctx, req.(*KeyPointCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetAllKeyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetAllKeyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetAllKeyPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetAllKeyPoints(ctx, req.(*KeyPointsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPointIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetKeyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetKeyPoint(ctx, req.(*KeyPointIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/CreateTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).CreateTour(ctx, req.(*TourCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToursIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetAllTours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetAllTours(ctx, req.(*ToursIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetTour(ctx, req.(*TourIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_AddTourEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourEquipmentCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).AddTourEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/AddTourEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).AddTourEquipment(ctx, req.(*TourEquipmentCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetTourEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourEquipmentListIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetTourEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetTourEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetTourEquipment(ctx, req.(*TourEquipmentListIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_DeleteTourEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourEquipmentDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).DeleteTourEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/DeleteTourEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).DeleteTourEquipment(ctx, req.(*TourEquipmentDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_CreateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).CreateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/CreateEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).CreateEquipment(ctx, req.(*EquipmentCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetAllEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetAllEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetAllEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetAllEquipment(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourMicroservice_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourMicroserviceServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TourMicroservice/GetEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourMicroserviceServer).GetEquipment(ctx, req.(*EquipmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourMicroservice_ServiceDesc is the grpc.ServiceDesc for TourMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.TourMicroservice",
	HandlerType: (*TourMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePreference",
			Handler:    _TourMicroservice_CreatePreference_Handler,
		},
		{
			MethodName: "GetPreference",
			Handler:    _TourMicroservice_GetPreference_Handler,
		},
		{
			MethodName: "CreateFacility",
			Handler:    _TourMicroservice_CreateFacility_Handler,
		},
		{
			MethodName: "GetAllFacilities",
			Handler:    _TourMicroservice_GetAllFacilities_Handler,
		},
		{
			MethodName: "CreateKeyPoint",
			Handler:    _TourMicroservice_CreateKeyPoint_Handler,
		},
		{
			MethodName: "GetAllKeyPoints",
			Handler:    _TourMicroservice_GetAllKeyPoints_Handler,
		},
		{
			MethodName: "GetKeyPoint",
			Handler:    _TourMicroservice_GetKeyPoint_Handler,
		},
		{
			MethodName: "CreateTour",
			Handler:    _TourMicroservice_CreateTour_Handler,
		},
		{
			MethodName: "GetAllTours",
			Handler:    _TourMicroservice_GetAllTours_Handler,
		},
		{
			MethodName: "GetTour",
			Handler:    _TourMicroservice_GetTour_Handler,
		},
		{
			MethodName: "AddTourEquipment",
			Handler:    _TourMicroservice_AddTourEquipment_Handler,
		},
		{
			MethodName: "GetTourEquipment",
			Handler:    _TourMicroservice_GetTourEquipment_Handler,
		},
		{
			MethodName: "DeleteTourEquipment",
			Handler:    _TourMicroservice_DeleteTourEquipment_Handler,
		},
		{
			MethodName: "CreateEquipment",
			Handler:    _TourMicroservice_CreateEquipment_Handler,
		},
		{
			MethodName: "GetAllEquipment",
			Handler:    _TourMicroservice_GetAllEquipment_Handler,
		},
		{
			MethodName: "GetEquipment",
			Handler:    _TourMicroservice_GetEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tourMicroservice.proto",
}
